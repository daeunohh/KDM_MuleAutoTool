import error
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
import time
import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
from options import Options 
import threading
import time
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import UnexpectedAlertPresentException, NoAlertPresentException
from selenium.webdriver.common.alert import Alert

my_bbs = 'https://www.mule.co.kr/mymule/mybbs'
running = False

def is_id_valid(id):
    if id == '':
        return False
    return True

def set_id(_id):
    if not is_id_valid(_id):
        return error.Error_Type.ID
    else :
        Options.id = _id
        return error.Error_Type.NONE

def is_valid_pw(pw):
    if pw == '':
        return False
    return True

def set_pw(_pw):
    if not is_valid_pw(_pw) :
        return error.Error_Type.PW
    else :
        Options.pw = _pw
        return error.Error_Type.NONE
####################################################################

class SeleniumBot:
    def __init__(self, driver_path="chromedriver.exe"):
        service = Service(executable_path=driver_path)
        self.driver = webdriver.Chrome(service=service)

    def open(self, url):
        self.driver.get(url)

    def open_mule(self):
        self.open('https://www.mule.co.kr/')

    def search_google(self, keyword):
        self.driver.get("https://www.google.com")
        box = self.driver.find_element(By.NAME, "q")
        box.send_keys(keyword)
        box.submit()

    def click_by_text(self, tag, text):
        elements = self.driver.find_elements(By.TAG_NAME, tag)
        for e in elements:
            if text in e.text:
                e.click()
                break

    def wait(self, seconds):
        time.sleep(seconds)

    def close(self):
        self.driver.quit()  

class StealthBot:
    def __init__(self, headless=False):
        options = uc.ChromeOptions()
        if headless:
            options.add_argument("--headless=new")

        # ÏÇ¨ÎûåÏ≤òÎüº Î≥¥Ïù¥Í∏∞ ÏúÑÌïú ÏòµÏÖòÎì§
        options.add_argument("--disable-blink-features=AutomationControlled")
        options.add_argument(
            "user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 Chrome/122.0.0.0 Safari/537.36"
        )

        # options.add_argument("--user-data-dir=C:/Users/ÏÇ¨Ïö©ÏûêÏù¥Î¶Ñ/AppData/Local/Google/Chrome/User Data")
        # options.add_argument("--profile-directory=Default")  # ÎòêÎäî "Profile 1", "Profile 2" Îì±


        self.driver = uc.Chrome(options=options)

    def do_task(self):
        self.human_wait(3, 4)

        self.go(my_bbs)
        self.click_by_index(By.CLASS_NAME, "more-btn", 0)
        self.human_wait(10,20)

        rows = self.driver.find_elements(By.CSS_SELECTOR, "table.small-table tbody tr")
        target_rows = []
        for row in rows:
            tds = row.find_elements(By.TAG_NAME, "td")
            if not tds:
                continue  # Ï≤´ Î≤àÏß∏ row (Ìó§Îçî)Îäî Ï†úÏô∏Îê®

            board_name = tds[0].text.strip()
            if board_name == "Ìï©Ï£ºÏã§/Ïó∞ÏäµÏã§":
                target_rows.append(row)
        if len(target_rows) <= 2:
            for row in target_rows:
                try:
                    link_element = row.find_element(By.TAG_NAME, "a")
                    title = link_element.text
                    print("üëâ Ï†úÎ™© ÌÅ¥Î¶≠:", title)

                    # ÌÅ¥Î¶≠ (Í∞ôÏùÄ ÌÉ≠ÏóêÏÑú Ïó¥Î¶º)
                    link_element.click()
                    self.human_wait(2,3) 
                    # ÌéòÏù¥ÏßÄ Î°úÎî© ÎåÄÍ∏∞ (ÌïÑÏöî Ïãú WebDriverWaitÏúºÎ°ú Î∞îÍøîÎèÑ Îê®)

                    try:
                        self.click(By.XPATH, "//a[contains(text(), 'ÏµúÏã†Í∏ÄÎ°ú Ïò¨Î¶¨Í∏∞')]")
                        self.human_wait(3, 5)

                        # ÌÅ¥Î¶≠ ÌõÑ alertÏù¥ Îñ† ÏûàÎäîÏßÄ ÌôïÏù∏
                        alert = self.driver.switch_to.alert
                        alert_text = alert.text
                        print("üö® ÏïåÎ¶ºÏ∞Ω Í∞êÏßÄ:", alert_text)

                        if "6ÏãúÍ∞Ñ Ïù¥ÌõÑÏóê Í∞ÄÎä•Ìï©ÎãàÎã§" in alert_text:
                            print("‚ùå ÏµúÏã†Í∏Ä Îì±Î°ù Ïã§Ìå® (Ïø®ÌÉÄÏûÑ Ï§ë)")
                        else:
                            print("‚úÖ ÏµúÏã†Í∏Ä Îì±Î°ù ÏÑ±Í≥µ")

                        alert.accept()  # ÌôïÏù∏ ÎàåÎü¨ÏÑú Îã´Í∏∞

                    except NoAlertPresentException:
                        print("‚úÖ ÏïåÎ¶º ÏóÜÏù¥ ÏµúÏã†Í∏Ä Îì±Î°ù ÏôÑÎ£å")

                    except UnexpectedAlertPresentException as e:
                        print("‚ùå ÏòàÏô∏ Î∞úÏÉù:", e)

                    finally:
                        self.driver.back()
                        self.human_wait(2, 3)

                except NoSuchElementException:
                    print("‚ùå ÎßÅÌÅ¨ ÌÅ¥Î¶≠ Ïã§Ìå®: a ÌÉúÍ∑∏ ÏóÜÏùå")
        
        self.human_wait(1)
        return
    
    def login(self):
        self.click(By.ID, "bt-write")
        self.find_and_type(By.ID, "login-user-id", Options.id)
        self.find_and_type(By.ID, "login-user-pw", Options.pw)
        try:
            self.click(By.CSS_SELECTOR, "a.login-bt.login")
            self.human_wait(3, 5)

            # ÌÅ¥Î¶≠ ÌõÑ alertÏù¥ Îñ† ÏûàÎäîÏßÄ ÌôïÏù∏
            alert = self.driver.switch_to.alert
            alert_text = alert.text
            print("üö® ÏïåÎ¶ºÏ∞Ω Í∞êÏßÄ:", alert_text)
            print("‚ùå Î°úÍ∑∏Ïù∏ Ïã§Ìå® (Í∞ÑÏ†ëÏ†ÅÏúºÎ°ú Í∞êÏßÄ)")  # Ïòà: Î°úÍ∑∏Ïù∏ ÌõÑÏóêÎßå ÎÇòÏò§Îäî Î©îÎâ¥
            alert.accept()  # ÌôïÏù∏ ÎàåÎü¨ÏÑú Îã´Í∏∞

            return error.Error_Type.LOGINFAIL         

        except NoAlertPresentException:
            print("‚úÖ Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ")
            return error.Error_Type.NONE

        except UnexpectedAlertPresentException as e:
            print("‚ùå ÏòàÏô∏ Î∞úÏÉù:", e)
            return error.Error_Type.UNKNOWN

    def set_options(self):
        self.find_and_select(By.ID, "input-category", Options.category)
        self.check_checkbox(By.ID, Options.room_option)
        self.click(By.XPATH, "//input[@placeholder='Îì±Î°ùÏãú ÏßÄÎèÑÏóê ÌëúÏãúÎê©ÎãàÎã§.']")
        self.find_and_type(By.ID, "search-map-text", Options.address)
        self.find_and_type_by_xpath("//input[@placeholder='http://Î•º Ìè¨Ìï®Ìïú Ï†ÑÏ≤¥ Í≤ΩÎ°úÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî.']"
                                , Options.homepage)
        self.find_and_type(By.ID, "input-sell-tel", Options.phone_number)
        self.upload_file(By.ID, "input-main-img", Options.main_photo)

    def go(self, url):
        self.driver.get(url)
        self.human_wait(2, 3)

    def find_and_type(self, by, identifier, text):
        elem = self.driver.find_element(by, identifier)
        for char in text:
            elem.send_keys(char)
            time.sleep(0.1)  # Ï≤úÏ≤úÌûà ÌÉÄÏù¥Ìïë
        self.human_wait(1, 2)

    def find_and_type_by_xpath(self, xpath, text):
        elem = self.driver.find_element(By.XPATH, xpath)
        elem.clear()
        for char in text:
            elem.send_keys(char)
            time.sleep(0.05)
        self.human_wait(0.5, 1)

    def click(self, by, identifier):
        elem = self.driver.find_element(by, identifier)
        elem.click()
        self.human_wait(1, 2)

    def click_by_index(self, by, identifier, index):
        elements = self.driver.find_elements(by, identifier)
        if index < len(elements):
            elements[index].click()
            self.human_wait(0.5, 1)
        else:
            print(f"‚ùå Ìï¥Îãπ Ïù∏Îç±Ïä§ {index}Ïùò Î≤ÑÌäºÏù¥ ÏóÜÏäµÎãàÎã§.")

    def find_and_select(self, by, identifier, visible_text):
        element = self.driver.find_element(by, identifier)
        select = Select(element)
        select.select_by_visible_text(visible_text)
        self.human_wait(0.5, 1)
    
    def check_checkbox(self, by, identifier):
        checkbox = self.driver.find_element(by, identifier)
        if not checkbox.is_selected():
            checkbox.click()
        self.human_wait(0.5, 1)

    def upload_file(self, by, identifier, filepath):
        from pathlib import Path
        absolute_path = str(Path(filepath).resolve())
        self.driver.find_element(by, identifier).send_keys(absolute_path)
        self.human_wait(5, 7)

    def write_to_editor(self, text):
        editor = self.driver.find_element(By.CLASS_NAME, "note-editable")
        editor.click()  # Ìè¨Ïª§Ïä§ Ï§òÏïº Ìï† ÎïåÎèÑ ÏûàÏùå
        editor.send_keys(text)
        self.human_wait(0.5, 1)

    def human_wait(self, min_sec=1, max_sec=2):
        time.sleep(min_sec + (max_sec - min_sec) * 0.5)

    def quit(self):
        self.driver.quit()

####################################################################
def stop_task():
    global running
    running = False
    return

def run_task():
    bot = StealthBot()
    bot.go('https://www.mule.co.kr/bbs/info/room')
    
    # Login
    res = bot.login()
    if res == error.Error_Type.LOGINFAIL:
        bot.quit()
        return error.Error_Type.LOGINFAIL

    def periodic_task():
        global running
        running = True
        while running:
            bot.do_task()

            for _ in range(6 * 60 * 60): 
                if not running:
                    return
                time.sleep(1)

    # Ïä§Î†àÎìúÎ°ú Î∞òÎ≥µ ÏûëÏóÖ ÏãúÏûë
    threading.Thread(target=periodic_task, daemon=True).start()
    return error.Error_Type.NONE
